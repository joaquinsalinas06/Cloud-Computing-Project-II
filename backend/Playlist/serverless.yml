org: ${env:ORG_NAME}
service: playlist-api

provider:
  name: aws
  runtime: python3.8
  memorySize: 1024
  timeout: 30
  iam:
    role: ${env:LAB_ROLE}
  environment:
    TABLE_NAME: ${sls:stage}-t_playlist
    GSI: ${sls:stage}-user_id-index
    LSI: ${sls:stage}-playlist_name-index
    LAMBDA_FUNCTION_NAME: user-api-${sls:stage}-validateToken

functions:
  #LSI
  getPlaylistByUserId:
    handler: getPlaylistByUserId.lambda_handler
    events:
      - http:
          path: /playlist/user/{user_id}
          method: get
          cors: true
          integration: lambda
          request:
            parameters:
              paths:
                user_id: true
              querystrings:
                provider_id: true

  getSongsPlaylist:
    handler: getSongsPlaylist.lambda_handler
    events:
      - http:
          path: /playlist/{playlist_id}/songs
          method: get
          cors: true
          integration: lambda
          request:
            parameters:
              paths:
                playlist_id: true

  createPlaylist:
    handler: createPlaylist.lambda_handler
    events:
      - http:
          path: /playlist/create/{provider_id}/{user_id}/
          method: post
          cors: true
          integration: lambda
          request:
            parameters:
              querystrings:
                provider_id: true
                playlist_id: true
                user_id: true

  addSong:
    handler: addSong.lambda_handler
    events:
      - http:
          path: /playlist/{provider_id}/{playlist_id}/add/{song_id}
          method: put
          cors: true
          integration: lambda
          request:
            parameters:
              paths:
                playlist_id: true
                song_id: true
              querystrings:
                provider_id: true

  deleteSong:
    handler: deleteSong.lambda_handler
    events:
      - http:
          path: /playlist/{provider_id}/{playlist_id}/delete/{song_id}
          method: delete
          cors: true
          integration: lambda
          request:
            parameters:
              paths:
                playlist_id: true
                song_id: true
  # todo: agregar provider_id en el lambda
  deletePlaylist:
    handler: deletePlaylist.lambda_handler
    events:
      - http:
          path: /playlist/delete/{provider_id}/{playlist_id}
          method: delete
          cors: true
          integration: lambda
          request:
            parameters:
              paths:
                playlist_id: true

resources:
  Resources:
    PlaylistsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TABLE_NAME}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: provider_id
            AttributeType: S
          - AttributeName: playlist_id
            AttributeType: N
          - AttributeName: user_id
            AttributeType: N
          - AttributeName: created_at
            AttributeType: S
        KeySchema:
          - AttributeName: provider_id
            KeyType: HASH
          - AttributeName: playlist_id
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.GSI}
            KeySchema:
              - AttributeName: user_id
                KeyType: HASH
              - AttributeName: created_at
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.LSI}
            KeySchema:
              - AttributeName: provider_id
                KeyType: HASH
              - AttributeName: user_id
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
