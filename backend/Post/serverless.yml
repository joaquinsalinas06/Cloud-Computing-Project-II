org: zamcloud
service: api-mure-post

provider:
  name: aws
  runtime: nodejs20.x
  memorySize: 1024
  timeout: 30
  iam:
    role: arn:aws:iam::418515024637:role/LabRole
  environment:
    TABLE_NAME: ${sls:stage}-${env:TABLE_NAME}
    INDEXGSI1_TABLE1_NAME: ${sls:stage}-${env:INDEXGSI1_TABLE1_NAME_e}
    INDEXGSI2_TABLE1_NAME: ${sls:stage}-${env:INDEXGSI2_TABLE1_NAME_e}
    INDEXLSI1_TABLE1_NAME: ${sls:stage}-${env:INDEXLSI1_TABLE1_NAME_e}

functions:
  createPost:
    handler: Handler/createpost.handler
    events:
      - http:
          path: /post/create
          method: post
          cors: true
          integration: lambda

  deletePost:
    handler: Handler/deletepost.handler
    events:
      - http:
          path: /post/delete/{provider_id}/{post_id}
          method: delete          
          cors: true
          integration: lambda

  getPost:
    handler: Handler/getpost.handler
    events:
      - http:
          path: /post/get/{provider_id}/{post_id}
          method: get
          cors: true
          integration: lambda

  getAllPostsByProvider:
    handler: Handler/getAllpostbyprovider_id.handler
    events:
      - http:
          path: /post/getall/{provider_id}
          method: get
          cors: true
          integration: lambda

  getPostBySongId:
    handler: Handler/getpostbysongid.handler
    events:
      - http:
          path: /post/getbysong/{provider_id}/{song_id}
          method: get
          cors: true
          integration: lambda

  getPostsByAlbumId:
    handler: Handler/getpostbyalbumid.handler
    events:
      - http:
          path: /post/getbyalbum/{provider_id}/{album_id}
          method: get
          cors: true
          integration: lambda

  getPostsByUserId:
    handler: Handler/getpostbyuserid.handler
    events:
      - http:
          path: /post/getbyuser/{provider_id}/{user_id}
          method: get
          cors: true
          integration: lambda

  updatePost:
    handler: Handler/updatepost.handler
    events:
      - http:
          path: /post/update/{provider_id}/{post_id}
          method: put
          cors: true
          integration: lambda

  getRecentPosts:
    handler: Handler/getrecentposts.handler
    events:
      - http:
          path: /post/getRecentPosts/{provider_id}
          method: get
          cors: true
          integration: lambda
resources:
  Resources:
    PostTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${sls:stage}-${env:TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: provider_id
            AttributeType: S
          - AttributeName: post_id
            AttributeType: S
          - AttributeName: song_id
            AttributeType: S
          - AttributeName: album_id
            AttributeType: S
          - AttributeName: user_id
            AttributeType: S
        KeySchema:
          - AttributeName: provider_id
            KeyType: HASH
          - AttributeName: post_id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.INDEXGSI1_TABLE1_NAME}
            KeySchema:
              - AttributeName: provider_id
                KeyType: HASH
              - AttributeName: song_id
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: ${self:provider.environment.INDEXGSI2_TABLE1_NAME}
            KeySchema:
              - AttributeName: provider_id
                KeyType: HASH
              - AttributeName: album_id
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.INDEXLSI1_TABLE1_NAME}
            KeySchema:
              - AttributeName: provider_id
                KeyType: HASH
              - AttributeName: user_id
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
      DeletionPolicy: Retain
