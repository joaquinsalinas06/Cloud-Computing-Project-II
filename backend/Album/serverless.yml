org: ${env:ORG_NAME}
service: album-api

provider:
  name: aws
  runtime: nodejs20.x
  memorySize: 1024
  timeout: 30
  iam:
    role: ${env:LAB_ROLE}
  environment:
    TABLE_NAME: ${sls:stage}-t_album
    GSI: ${sls:stage}-artist_id-release_date-index
    LSI: ${sls:stage}-title-index
    LAMBDA_FUNCTION_NAME: user-api-${sls:stage}-validateToken

functions:
  getAlbumById:
    handler: handler/getAlbumById.handler
    events:
      - http:
          path: /album/{provider_id}/{album_id}
          method: get
          cors: true
          request:
            parameters:
              paths:
                provider_id: true
                album_id: true
              headers:
                Authorization: true
  #LSI
  getAlbumByTitleWP:
    handler: handler/getAlbumByTitleWP.handler
    events:
      - http:
          path: /album/by-title/{provider_id}
          method: get
          cors: true
          request:
            parameters:
              paths:
                providerId: true
              querystrings:          
                title: true
                limit: true
                exclusiveStartKey: true
              headers:
                Authorization: true

  #GSI
  getAlbumsByArtistId_ReleaseDate:
    handler: handler/getAlbumsByArtistId_ReleaseDate.handler
    events:
      - http:
          path: /album/by-artist-release-date/{artist_id}
          method: get
          cors: true
          request:
            parameters:
              paths:
                artist_id: true
              querystrings:
                start_date: true
                end_date: true
                limit: true
                exclusiveStartKey: true
              headers:
                Authorization: true


  getAllAlbumsWP:
    handler: handler/getAllAlbumsWP.handler
    events:
      - http:
          path: /album/all/{provider_id}
          method: get
          cors: true
          request:
            parameters:
              paths:
                providerId: true
              querystrings:
                limit: true
                exclusiveStartKey: true
              headers:
                Authorization: true

  createAlbum:
    handler: handler/createAlbum.handler
    events:
      - http:
          path: /album/create/{provider_id}
          method: post
          cors: true
          request:
            parameters:
              headers:
                Authorization: true
            schema:
              application/json:
                type: object
                properties:
                  provider_id:
                    type: string
                required:
                  - provider_id                
  createAlbums:
    handler: handler/createAlbums.handler
    events:
      - http:
          path: /albums/create
          method: post
          cors: true
          request:
            parameters:
              headers:
                Authorization: true
            schema:
              application/json:
                type: array
                items:
                  type: object
                  properties:
                    provider_id:
                      type: string
                  required:
                    - provider_id             

  deleteAlbum:
    handler: handler/deleteAlbum.handler
    events:
      - http:
          path: /album/delete/{provider_id}/{album_id}
          method: delete
          cors: true
          request:
            parameters:
              paths:
                provider_id: true
                album_id: true
              headers:
                Authorization: true                  

resources:
  Resources:
    AlbumsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: provider_id
            AttributeType: S
          - AttributeName: album_id
            AttributeType: N
          - AttributeName: artist_id
            AttributeType: N
          - AttributeName: release_date
            AttributeType: S
          - AttributeName: title
            AttributeType: S
        KeySchema:
          - AttributeName: provider_id
            KeyType: HASH
          - AttributeName: album_id
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.GSI}
            KeySchema:
              - AttributeName: artist_id 
                KeyType: HASH
              - AttributeName: release_date
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.LSI}
            KeySchema:
              - AttributeName: provider_id 
                KeyType: HASH
              - AttributeName: title
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
