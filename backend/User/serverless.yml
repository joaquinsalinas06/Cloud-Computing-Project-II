org: zamcloud
service: api-mure-user

provider:
  name: aws
  runtime: python3.8
  memorySize: 1024
  timeout: 30
  iam:
    role: arn:aws:iam::418515024637:role/LabRole
  environment:
    TABLE_NAME: ${sls:stage}-users-table
    INDEXGSI1_TABLE1_NAME: ${sls:stage}-provider-user-index
    INDEXGSI2_TABLE1_NAME: ${sls:stage}-provider-username-index
    INDEXLSI1_TABLE1_NAME: ${sls:stage}-provider-email-index
    INDEXLSI2_TABLE1_NAME: ${sls:stage}-provider-username-lsi
    TABLE2_NAME: ${sls:stage}-tokens-table
    INDEXGSI1_TABLE2_NAME: ${sls:stage}-TokenIndex
    INDEXLSI1_TABLE2_NAME: ${sls:stage}-user-token-lsi
    AUTHORIZER_FUNCTION_NAME: api-mure-user-dev-validateToken 


functions:
  createUser:
    handler: Handler/registerUser.lambda_handler
    events:
      - http:
          path: /user/register
          method: post
          cors: true
          integration: lambda

  loginUser:
    handler: Handler/loginUser.lambda_handler
    events:
      - http:
          path: /user/login
          method: post
          cors: true
          integration: lambda

  getUser:
    handler: Handler/getUser.lambda_handler
    events:
      - http:
          path: /user/get/{provider_id}/{user_id}
          method: get
          cors: true
          integration: lambda

  deleteUser:
    handler: Handler/deleteUser.lambda_handler
    events:
      - http:
          path: /user/delete/{provider_id}/{user_id}
          method: delete
          cors: true
          integration: lambda

  updateUser:
    handler: Handler/updateUser.lambda_handler
    events:
      - http:
          path: /user/update/{provider_id}/{user_id}
          method: put
          cors: true
          integration: lambda

  getallUsersByProvider:
    handler: Handler/getallUsersByProvider.lambda_handler
    events:
      - http:
          path: /user/getall/{provider_id}
          method: get
          cors: true
          request:
            parameters:
              querystrings:
                page: true
                limit: true
          integration: lambda

  validateToken:
    handler: Handler/validarToken.lambda_handler

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: provider_id
            AttributeType: S
          - AttributeName: user_id
            AttributeType: S
          - AttributeName: provider_user_id
            AttributeType: S
          - AttributeName: email
            AttributeType: S
          - AttributeName: username
            AttributeType: S
          - AttributeName: provider_username
            AttributeType: S
        KeySchema:
          - AttributeName: provider_id
            KeyType: HASH
          - AttributeName: user_id
            KeyType: RANGE
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.INDEXLSI1_TABLE1_NAME}
            KeySchema:
              - AttributeName: provider_id
                KeyType: HASH
              - AttributeName: email
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: ${self:provider.environment.INDEXLSI2_TABLE1_NAME}
            KeySchema:
              - AttributeName: provider_id
                KeyType: HASH
              - AttributeName: username
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.INDEXGSI1_TABLE1_NAME}
            KeySchema:
              - AttributeName: provider_id
                KeyType: HASH
              - AttributeName: provider_user_id
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: ${self:provider.environment.INDEXGSI2_TABLE1_NAME}
            KeySchema:
              - AttributeName: provider_id
                KeyType: HASH
              - AttributeName: provider_username
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
      DeletionPolicy: Retain

    TokensTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TABLE2_NAME}
        AttributeDefinitions:
          - AttributeName: provider_id
            AttributeType: S
          - AttributeName: email
            AttributeType: S
          - AttributeName: token
            AttributeType: S
        KeySchema:
          - AttributeName: provider_id
            KeyType: HASH
          - AttributeName: email
            KeyType: RANGE
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.INDEXLSI1_TABLE2_NAME}
            KeySchema:
              - AttributeName: provider_id
                KeyType: HASH
              - AttributeName: token
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.INDEXGSI1_TABLE2_NAME}
            KeySchema:
              - AttributeName: token
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
      DeletionPolicy: Retain
