org: ${env:ORG_NAME}
service: artist-api

provider:
  name: aws
  runtime: nodejs20.x
  memorySize: 1024
  timeout: 30
  iam:
    role: ${env:LAB_ROLE}
  environment:
    TABLE_NAME: ${sls:stage}-t_artist
    GSI_NAME: artistNameIndex
    LSI_NAME_1: countryIndex
    LSI_NAME_2: genreIndex
    LAMBDA_FUNCTION_NAME:  user-api-${sls:stage}-validateToken

functions:
  createArtists:
    handler: handler/createArtists.handler
    events:
      - http:
          path: /artist/create
          method: post
          cors: true
          integration: lambda

  deleteArtist:
    handler: handler/deleteArtist.handler
    events:
      - http:
          path: /deleteArtist/{provider_id}/{artist_id}
          method: delete
          cors: true
          integration: lambda

  getAllArtistsWP:
    handler: handler/getAllArtistsWP.handler
    events:
      - http:
          path: /artist/allWP
          method: get
          cors: true
          integration: lambda

  getArtistById:
    handler: handler/getArtistById.handler
    events:
      - http:
          path: /getById/{provider_id}/{artist_id}
          method: get
          cors: true
          integration: lambda

  getArtistByNameWP:
    handler: handler/getArtistByNameWP.handler
    events:
      - http:
          path: /artist/by-nameWP
          method: get
          cors: true
          integration: lambda

  getArtistByCountryWP:
    handler: handler/getArtistsByCountryWP.handler
    events:
      - http:
          path: /artist/by-countryWP
          method: get
          cors: true
          integration: lambda

  getArtistByGenreWP:
    handler: handler/getArtistsByGenreWP.handler
    events:
      - http:
          path: /artist/by-genreWP
          method: get
          cors: true
          integration: lambda

  updateArtist:
    handler: handler/updateArtist.handler
    events:
      - http:
          path: /artist/{artistId}
          method: put 
          cors: true
          integration: lambda

resources:
  Resources:
    ArtistTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: provider_id
            AttributeType: S
          - AttributeName: artist_id
            AttributeType: N
          - AttributeName: name
            AttributeType: S
          - AttributeName: country
            AttributeType: S
          - AttributeName: genre
            AttributeType: S
        KeySchema:
          - AttributeName: provider_id
            KeyType: HASH
          - AttributeName: artist_id
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.GSI_NAME}
            KeySchema:
              - AttributeName: name
                KeyType: HASH
              - AttributeName: provider_id
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.LSI_NAME_1}
            KeySchema:
              - AttributeName: provider_id
                KeyType: HASH
              - AttributeName: country
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: ${self:provider.environment.LSI_NAME_2}
            KeySchema:
              - AttributeName: provider_id
                KeyType: HASH
              - AttributeName: genre
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
