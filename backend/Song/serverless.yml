org: ${env:ORG_NAME}
service: song-api

provider:
  name: aws
  runtime: nodejs20.x
  memorySize: 1024
  timeout: 30
  iam:
    role: ${env:LAB_ROLE}
  environment:
    TABLE_NAME: ${sls:stage}-t_song
    GSI1: ${sls:stage}-title-index
    LSI1: ${sls:stage}-genre-index
    LAMBDA_FUNCTION_NAME: user-api-${sls:stage}-validateToken

functions:
  createSong:
    handler: handler/createSong.handler
    events:
      - http:
          path: /song
          method: post
          cors: true
          integration: lambda

  createSongs:
    handler: handler/createSongs.handler
    events:
      - http:
          path: /songs
          method: post
          cors: true
          integration: lambda

  deleteSong:
    handler: handler/deleteSong.handler
    events:
      - http:
          path: /deleteSong/{provider_id}/{song_id}
          method: delete
          cors: true
          integration: lambda
          request:
            parameters:
              paths:
                provider_id: true
                song_id: true

  getSongById:
    handler: handler/getSongById.handler
    events:
      - http:
          path: /getSongById/{provider_id}/{song_id}
          method: get
          cors: true
          integration: lambda
          request:
            parameters:
              paths:
                provider_id: true
                song_id: true

  getSongByTitleWP:
    handler: handler/getSongByTitleWP.handler
    events:
      - http:
          path: /getSongByTitleWP
          method: get
          cors: true
          integration: lambda
          request:
            parameters:
              querystrings:
                title: true
                limit: false
                exclusiveStartKey: false

  getAllSongsWP:
    handler: handler/getAllSongsWP.handler
    events:
      - http:
          path: /getAllSongsWP
          method: get
          cors: true
          integration: lambda
          request:
            parameters:
              querystrings:
                provider_id: true
                limit: false
                exclusiveStartKey: false

resources:
  Resources:
    SongsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: provider_id
            AttributeType: S
          - AttributeName: song_id
            AttributeType: N
          - AttributeName: title
            AttributeType: S
        KeySchema:
          - AttributeName: provider_id
            KeyType: HASH
          - AttributeName: song_id
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.GSI1}
            KeySchema:
              - AttributeName: title
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.LSI1}
            KeySchema:
              - AttributeName: genre
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
