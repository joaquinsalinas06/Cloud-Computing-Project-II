org: ${env:ORG_NAME}
service: song-api

provider:
    name: aws
    runtime: nodejs20.x
    memorySize: 1024
    timeout: 30
    iam:
        role: ${env:LAB_ROLE}
    environment:
        TABLE_NAME: ${sls:stage}-t_song
        GSI: ${sls:stage}-genre-duration-index
        LSI: ${sls:stage}-title-index
        LAMBDA_FUNCTION_NAME: user-api-${sls:stage}-validateToken

functions:
    getSongById:
        handler: handler/getSongById.handler
        events:
            - http:
                  path: /song/{provider_id}/{song_id}
                  method: get
                  cors: true
                  integration: lambda

    #LSI
    getSongsByTitleWP:
        handler: handler/getSongsByTitleWP.handler
        events:
            - http:
                  path: /song/by-title-wp/{provider_id}
                  method: get
                  cors: true
                  integration: lambda

    #GSI
    getSongsByGenre_Duration:
        handler: handler/getSongsByGenre_Duration.handler
        events:
            - http:
                  path: /song/by-genre-duration
                  method: get
                  cors: true
                  integration: lambda

    getAllSongsWP:
        handler: handler/getAllSongsWP.handler
        events:
            - http:
                  path: /song/all/{provider_id}
                  method: get
                  cors: true
                  integration: lambda

    createSong:
        handler: handler/createSong.handler
        events:
            - http:
                  path: /song/create/{provider_id}
                  method: post
                  cors: true
                  integration: lambda

    createSongs:
        handler: handler/createSongs.handler
        events:
            - http:
                  path: /songs/create
                  method: post
                  cors: true
                  integration: lambda

    deleteSong:
        handler: handler/deleteSong.handler
        events:
            - http:
                  path: /song/delete/{provider_id}/{song_id}
                  method: delete
                  cors: true
                  integration: lambda

resources:
    Resources:
        SongsTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: ${self:provider.environment.TABLE_NAME}
                AttributeDefinitions:
                    - AttributeName: provider_id
                      AttributeType: S
                    - AttributeName: song_id
                      AttributeType: N
                    - AttributeName: title
                      AttributeType: S
                    - AttributeName: genre
                      AttributeType: S
                    - AttributeName: duration
                      AttributeType: S
                KeySchema:
                    - AttributeName: provider_id
                      KeyType: HASH
                    - AttributeName: song_id
                      KeyType: RANGE
                GlobalSecondaryIndexes:
                    - IndexName: ${self:provider.environment.GSI}
                      KeySchema:
                          - AttributeName: genre
                            KeyType: HASH
                          - AttributeName: duration
                            KeyType: RANGE
                      Projection:
                          ProjectionType: ALL
                LocalSecondaryIndexes:
                    - IndexName: ${self:provider.environment.LSI}
                      KeySchema:
                          - AttributeName: provider_id
                            KeyType: HASH
                          - AttributeName: title
                            KeyType: RANGE
                      Projection:
                          ProjectionType: ALL
                BillingMode: PAY_PER_REQUEST
                PointInTimeRecoverySpecification:
                    PointInTimeRecoveryEnabled: true
